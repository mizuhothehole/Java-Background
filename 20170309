Using Inner Class And Inner Interface

当接口被作为参数传递的时候，它很可能就是已经带有值了。我们需要做基本上就是把方法实现掉，值都不用我们去操心了。
另外当看到一个接口的声明的时候，先分清楚它是个类的实例的声明还是就是本身就是个接口。接口一共就两种状态。当一个
接口被实现的时候，他处于被实现状态，没有被实现的时候处于待实现状态。这样说来的话，待实现状态下很可能参数都给你
准备好了。也就是数据都给你准备好了。你就只需要把人家的接口按照方法名重新写一遍就ok了。你实现的也是人家规范之后
的东西。只不过只给你规范了一个方法名而已。进而给你提供了数据。而当已经被实现之后，你需要进一步的区分它是一匿名类
的实现它的，还是说有名字的类去实现它的。当被实现之后，它就将指向一个类当中的一个方法。而且也只会指向这个方法，也
就是说，就算是一个匿名类实现它，它依然也就是在指向一个方法块，效果是一模一样的。所以直接new一个接口的时候，实际
上java会认为你是用一匿名类去实现了它，而且这个时候，特别是被实现的时候，接口体现的就是一种实现。而并非数据的传
递。那么接口能否同时体现数据传递和方法实现的特性呢？如果你来写一个接口的话，肯定是人家去实现这个方法，而你最多
就做到提供数据这一步。而且你还要把这个接口的指针传给人家。这样人家拿到接口的指针之后才会得到所有待处理的数据。所
以说接口的指针这个东西实际上是指向的方法的参数的值的地址，同时也是个指针。

This is the function of a inner class with no name
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfacetest;

import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author user
 */
public class InterfaceTest {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        
    class TextMaker {
    private static final String START_TEXT = "Start Of the text";
    private static final String END_TEXT = "End Of the text";
    private static final int PRINT_TIMES = 2;
    private static final int START_int = 1000000000;
    private static final int END_int = 1111111111;
    public List<CallBack> mCallBackList;
    public List<CallBack> newCallBackList;

    private void addCallBackForStartText(){
        CallBack callback = new CallBack(){
            @Override
            public void makeText(int a) {
                a = START_int;
                System.out.println(++a);
            }
            
        };
        mCallBackList.add(callback);
    }
        private void addCallBackForEndText(){
        CallBack callback = new CallBack(){
            @Override
            public void makeText(int a) {
                a = END_int;
                System.out.println(--a);
            }
            
        };
        mCallBackList.add(callback);
    }
        
    public void initialize(){
        mCallBackList = new ArrayList<CallBack>();
        System.out.println(mCallBackList.size());
        this.addCallBackForStartText();
        for(int i = 0; i < PRINT_TIMES; i++){
            this.addCallBackForEndText();
        }

        System.out.println(mCallBackList.size());
    }

}
        
        // TODO code application logic here
        System.out.println("main process start");
        TextMaker tm = new TextMaker();
        tm.initialize();
        for (CallBack cb : tm.mCallBackList){
            cb.makeText(1);
        }
    }
    interface CallBack {
    void makeText(int a);
}
}

this is the function of a interface and is made in two classes
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfacetest;

import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author user
 */
public class InterfaceTest {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
    
   
        
        // TODO code application logic here
        System.out.println("main process start");
        TextMaker tm = new TextMaker();
        tm.initialize();
                    tm.makethis(new CallBack(){
                @Override
                public void makeText(int mm) {
                         System.out.println(mm);   
                }
                
            });
        for (CallBack cb : tm.mCallBackList){
            cb.makeText(1);

        }
 
    }
    interface CallBack {
    void makeText(int a);
}
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfacetest;

import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author user
 */
public class TextMaker {
    private static final String START_TEXT = "Start Of the text";
    private static final String END_TEXT = "End Of the text";
    private static final int PRINT_TIMES = 2;
    private static final int START_int = 1000000000;
    private static final int END_int = 1111111111;
    public List<InterfaceTest.CallBack> mCallBackList;
    public List<InterfaceTest.CallBack> newCallBackList;

    private void addCallBackForStartText(){
        InterfaceTest.CallBack callback = new InterfaceTest.CallBack(){
            @Override
            public void makeText(int a) {
                a = START_int;
                System.out.println(++a);
            }
            
        };
        mCallBackList.add(callback);
    }
    void makethis(InterfaceTest.CallBack callback){
        callback.makeText(END_int);
    }
        private void addCallBackForEndText(){
        InterfaceTest.CallBack callback = new InterfaceTest.CallBack(){
            @Override
            public void makeText(int a) {
                a = END_int;
                System.out.println(--a);
            }
            
        };
        mCallBackList.add(callback);
    }
        
    public void initialize(){
        mCallBackList = new ArrayList<InterfaceTest.CallBack>();
        System.out.println(mCallBackList.size());
        this.addCallBackForStartText();
        for(int i = 0; i < PRINT_TIMES; i++){
            this.addCallBackForEndText();
        }

        System.out.println(mCallBackList.size());
    }

}
