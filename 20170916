The result of some JVM testings

// I think it is not a good way to use the "+" to link strings.
// However the best way is to use the concat as  it is working so fast
public class MainMind {
    public static void main1(String[] str) {
        long start = System.currentTimeMillis();
        for (int i = 0; i < 1000000; i++) {
            StringBuffer buffer = new StringBuffer();
            buffer.append("a");
            buffer.append("b");
            buffer.append("c");
            buffer.append("d");
            buffer.append("e");
        }

        System.out.printf("" + (System.currentTimeMillis() - start));
        System.out.printf("%%%%%%%%%%%%");
        start = System.currentTimeMillis();
        for (int i = 0; i < 1000000; i++) {
            StringBuilder builder = new StringBuilder();
            builder.append("a");
            builder.append("b");
            builder.append("c");
            builder.append("d");
            builder.append("e");
        }
        System.out.printf("" + (System.currentTimeMillis() - start));
        System.out.printf("%%%%%%%%%%%%");
        start = System.currentTimeMillis();
        for (int i = 0; i < 1000000; i++) {
            String string = "";
            string = string.concat("a");
            string = string.concat("b");
            string = string.concat("c");
            string = string.concat("d");
            string = string.concat("e");
        }
        System.out.printf("" + (System.currentTimeMillis() - start));
        System.out.printf("%%%%%%%%%%%%");

        start = System.currentTimeMillis();
        for (int i = 0; i < 1000000; i++) {
            String string = "";
            string = string + "a";
            string = string + "b";
            string = string + "c";
            string = string + "d";
            string = string + "e";
        }
        System.out.printf("" + (System.currentTimeMillis() - start));
        System.out.printf("%%%%%%%%%%%%");
    }

    // The concat method will return a new object representing the result, but the buffer and the builder will make changes
    // around themselves
    public static void main2(String[] str) {
        String s = "";
        String b = s.concat("asasas");
        String c = b + "asas";
        System.out.printf(b);// this will print asasas only, as it did not change it self
    }

    // So I also showed in fact the and or we should only use the && and || when we want to calculate something.

    // to see how the "{" and the "}" effect the calculating in our daily work
    public static void main3(String[] str) {
        long start = System.currentTimeMillis();
        for (int i = 0; i < 100000000; i++)
            Math.abs(4324234);
        System.out.printf("" + (System.currentTimeMillis() - start));
        System.out.printf("%%%%%%%%%%");

        start = System.currentTimeMillis();
        for (int i = 0; i < 100000000; i++) {
            Math.abs(4324234);
        }
        System.out.printf("" + (System.currentTimeMillis() - start));

    }
}

So here we seem to see that in fact the changes are so small, and I prefer to use the concat to do the string links as tested.

同时我也写了一些意味不明的代码像这个样子:

public class ThreadTest {
    static int a;
    static AA b = new AA((int) 0);

    static public void main(String[] str) {
        Thread thread1 = new Thread(new Runnable() {

            @Override
            public void run() {
                for (int c = 1; c < 100; c++) {
                    a = a + 1;
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    b.a = b.a + 1;
                }
            }
        });

        Thread thread2 = new Thread(new Runnable() {

            @Override
            public void run() {
                for (int c = 1; c < 100; c++) {
                    a = a + 2;
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    b.a = b.a + 2;
                }

            }
        });

        Thread thread3 = new Thread(new Runnable() {

            @Override
            public void run() {
                while (true) {
                    try {
                        Thread.sleep(300);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    System.out.printf("$$$" + a + "%n");
                    System.out.printf("###" + b.get() + "%n");
                }
            }
        });
        thread3.run();
        thread1.run();
        thread2.run();

    }

    static class AA {
        AA(int bb) {
            this.a = bb;
        }

        int a;

        int get() {
            return a;
        }

        ;
    }
}

我认为这些代码没啥意义.可是,网上读了别人的文章,他们说堆里面会出现一些所谓的内存对象共享什么什么的.所以我明白了其实Java的内存模型只适用于堆里面的.
也就是所有的线程共享内存.可是对于这个内存的共享,我们还要知道只是共享同一个对象实例.

