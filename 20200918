https://stackoverflow.com/questions/17827022/how-is-countdownlatch-used-in-java-multithreading

这个文档说明了怎么使用java里面的CountDownLatch.

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

class Processor implements Runnable {
    private CountDownLatch latch;

    public Processor(CountDownLatch latch) {
        this.latch = latch;
    }

    public void run() {
        System.out.println("Started.");

        try {
            Thread.sleep(3000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        latch.countDown();
    }
}

public class App {

    public static void main(String[] args) {

        CountDownLatch latch = new CountDownLatch(3); // coundown from 3 to 0

        ExecutorService executor = Executors.newFixedThreadPool(3); // 3 Threads in pool

        for(int i=0; i < 3; i++) {
            executor.submit(new Processor(latch)); // ref to latch. each time call new Processes latch will count down by 1
        }

        try {
            latch.await();  // wait until latch counted down to 0
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("Completed.");
    }

}

问题是countdown能不能够完全被归零。如果没有办法归零的话。
那么app很有可能会死掉。永远动不了。

关于thread和executorservice，还有任务的序列化。

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class NewSingleThreadExecutor {
    public static void main(String[] args) {
        ExecutorService exec = Executors.newSingleThreadExecutor();
        for (int i = 0; i < 5; i++) {
            System.out.println("main(" + i + ")#submit - " + Thread.currentThread().getId());
            exec.submit(new TestLogic(i));
        }
        exec.shutdown();
    }
}

Thread safe:
a++ is not safe...

package org.jan.java.test;
 
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
 
/**
 * 关于count++在多线程调用情况下
 * 
 * @author jan
 */
public class Counter {
	private volatile int count = 0;
 
	/**
	 * 为了保证数据的准确性，多线程的情况下需要加上synchronized关键字</br>
	 * 否则会出现出乎预料的结果 这也是线程安全的重要体现
	 */
	public void increment() {
		count++;
	}
	
	private int getCount() {
		return count;
	}
	
	/**
	 * 这里模拟一个递增的任务，递增目标为100W
	 */
	public static void main(String[] args) throws InterruptedException {
		 final Counter counter = new Counter();
//		final AtomicCounter counter = new AtomicCounter();
		int workCount = 1000000;
		ExecutorService executor = Executors.newFixedThreadPool(10);
		long start = System.currentTimeMillis();
		for (int i = 0; i < workCount; i++) {
			Runnable runnable = new Runnable() {
				@Override
				public void run() {
					counter.increment();
				}
			};
			executor.execute(runnable);
		}
		// 关闭启动线程，执行未完成的任务
		executor.shutdown();
		// 等待所有线程完成任务，完成后才继续执行下一步
		executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);
		System.out.println("耗时：" + (System.currentTimeMillis() - start) + "ms");
		System.out.println("执行结果：count=" + counter.getCount());
	}
}
